[
  {
    "id": 1,
    "title": "Native functions can be done with the AST or in this case injection",
    "additionalNotes": null,
    "completed": true
  },
  {
    "id": 2,
    "title": "gonna have to double index into hmap because of borrow checker issue, should be fixed soon with future rust update",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 3,
    "title": "For $vars put them into a vec and repeat the statement with the next index",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 4,
    "title": "Lexer: check ahead only returns true, not as verbose if you need to check ahead for multiple things. Can also just call check ahead twice",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 5,
    "title": "Future: Add scope id to a variable based on where it was created",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 6,
    "title": "for scope can create new scope when needed and assign it an id and a parent scope",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 7,
    "title": "Todo: while, if comparison static dont recheck every loop. if hit } and nest = startnest then restart while and check comparison again. break keyword to end loop at point.",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 8,
    "title": "need to not consume tokens while in while loop, just copy",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 9,
    "title": "self.position will be 1 ahead always",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 10,
    "title": "Nested loops",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 11,
    "title": "Configure with string and bool variable types",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 12,
    "title": "Native functions",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 13,
    "title": "Custom functions",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 14,
    "title": "Variable scope",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 15,
    "title": "middle of adding different support for bool and string types",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 16,
    "title": "Optimize: cloning to turn var into expression for string types",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 17,
    "title": "maybe just use get expr in parse_bin_expr instead of manual check?",
    "additionalNotes": null,
    "completed": false
  }
]