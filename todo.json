[
  {
    "id": 1,
    "title": "Native functions can be done with the AST or in this case injection",
    "additionalNotes": null,
    "completed": true
  },
  {
    "id": 2,
    "title": "gonna have to double index into hmap because of borrow checker issue, should be fixed soon with future rust update",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 3,
    "title": "For $vars put them into a vec and repeat the statement with the next index",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 4,
    "title": "Future: Add scope id to a variable based on where it was created",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 5,
    "title": "for scope can create new scope when needed and assign it an id and a parent scope",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 6,
    "title": "Todo: while, if comparison static dont recheck every loop. if hit } and nest = startnest then restart while and check comparison again. break keyword to end loop at point.",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 7,
    "title": "Nested loops",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 8,
    "title": "Configure with string and bool variable types",
    "additionalNotes": null,
    "completed": true
  },
  {
    "id": 9,
    "title": "Native functions",
    "additionalNotes": null,
    "completed": true
  },
  {
    "id": 10,
    "title": "Custom functions",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 11,
    "title": "Variable scope",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 12,
    "title": "Optimize: cloning to turn var into expression for string types",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 13,
    "title": "while loops wont work as long as we start position at 0 instead of while position for double looping",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 14,
    "title": "pass an option<Expr> to parse fn and if its Some then push it to beginning of Vec<Expr>. This can be considered self if the function takes self as a parameter?",
    "additionalNotes": null,
    "completed": true
  },
  {
    "id": 15,
    "title": "Hoist: If parsing identifier and next token is ( then can search tokens till identifier is found after fn. If no identifier matches and its not a decleration aka after fn then throw error",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 16,
    "title": "Range for custom function might not even need to be range might just need to be start position",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 17,
    "title": "House cleaning: Process of removing and adding temp fn vars to vars is repetitive and dirty",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 18,
    "title": "House cleaning: Change all instances of hashing to use lib::hash instead",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 19,
    "title": "cant use same names in arguments and parameters need to fix",
    "additionalNotes": null,
    "completed": false
  },
  {
    "id": 20,
    "title": "custom funcs cant chain currently",
    "additionalNotes": null,
    "completed": false
  }
]